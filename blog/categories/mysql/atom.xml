<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mysql | hanfeng.name]]></title>
  <link href="http://fenghan.github.io/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://fenghan.github.io/"/>
  <updated>2015-10-16T08:25:18+08:00</updated>
  <id>http://fenghan.github.io/</id>
  <author>
    <name><![CDATA[HanFeng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MySQL存储引擎]]></title>
    <link href="http://fenghan.github.io/blog/2015/09/16/mysql-storage-engine/"/>
    <updated>2015-09-16T20:01:29+08:00</updated>
    <id>http://fenghan.github.io/blog/2015/09/16/mysql-storage-engine</id>
    <content type="html"><![CDATA[<h3>什么是MySQL存储引擎</h3>

<p>服务层 - 存储引擎 - 文件系统层</p>

<p>MySQL5.5 以后默认为InnoDB,推荐。</p>

<p>Memory存储引擎，临时表</p>

<h4>MyISAM</h4>

<ul>
<li>堆表（插入性能好）</li>
<li>不支持事务</li>
<li>只维护索引缓存池，表数据缓存交给操作系统（表若很大，浪费内存）</li>
<li>锁粒度较大（表级锁，读写锁，读的时候不允许写，写的时候不允许读）</li>
<li>数据文件可以直接拷贝，备份数据用得上</li>
</ul>


<p>不推荐的原因：1. 不支持事务 2. 锁的颗粒度比较大 3. 表数据缓存交给操作系统，表若很大，浪费内存</p>

<h4>TokuDB</h4>

<p>社区版备份比较麻烦</p>

<h4>MySQL Cluster</h4>

<ul>
<li>多主分布式集群</li>
<li>数据节点间冗余，高可用</li>
<li>支持事务</li>
<li>设计上易于扩展</li>
<li>面向未来，线上慎用</li>
</ul>


<h4>InnoDB</h4>

<ul>
<li>缓存池 +　各种后台线程　＋ 数据文件</li>
</ul>


<p>事务ACID:</p>

<ul>
<li>回滚段失败回滚（A）</li>
<li>支持主外键（C）</li>
<li>事务版本 + 回滚段 = MVCC(I)</li>
<li>事务日志持久化（D）</li>
</ul>


<p>行级别锁：</p>

<ul>
<li>写不阻塞读</li>
<li>不同行间的写相互不阻塞</li>
<li>并发性能好</li>
<li>锁是加在索引上的</li>
</ul>


<p>InnoDB数据块缓存池</p>

<ul>
<li>数据的读写经过缓存</li>
<li>IO效率高，性能好。</li>
</ul>


<p>InnoDB数据文件存储结构：</p>

<ul>
<li>根据主键寻址速度很快</li>
<li>主键值递增的insert插入效率较好</li>
<li>主键随机insert插入效率较好</li>
<li><strong>因此，InnoDB表必须指定主键，建议使用自增数字</strong></li>
</ul>


<p>数据持久化与事务日志</p>

<ul>
<li>事务日志实时持久化</li>
</ul>


<h3>介绍MySQL主要存储引擎的特点及试用场景</h3>

<h3>Innodb存储引擎</h3>

<pre><code>show global variables like "%increment%";

+-----------------------------+-------+
| Variable_name               | Value |
+-----------------------------+-------+
| auto_increment_increment    | 1     |
| auto_increment_offset       | 1     |
| div_precision_increment     | 4     |
| innodb_autoextend_increment | 64    |
+-----------------------------+-------+
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL数据库对象与应用]]></title>
    <link href="http://fenghan.github.io/blog/2015/09/14/mysql-db-object/"/>
    <updated>2015-09-14T11:16:22+08:00</updated>
    <id>http://fenghan.github.io/blog/2015/09/14/mysql-db-object</id>
    <content type="html"><![CDATA[<h1>MySQL数据类型</h1>

<h4>经验之谈</h4>

<ul>
<li>存储性别、省份、类型等分类信息时，选择TINYINT或者ENUM</li>
<li>BIGINT存储空间更大，INT和BIGINT之间通常选择BIGINT</li>
<li>交易等高精度数据时选择使用DECIMAL</li>
</ul>


<h1>MySQL数据对象</h1>

<p>help create index</p>

<h1>MySQL权限管理</h1>

<ul>
<li><p>Data Privileges</p>

<pre><code>  DATA: SELECT, INSERT, UPDATE, DELETE
</code></pre></li>
<li>Define</li>
<li>Administrator Privileges

<ul>
<li>Shutdown Database</li>
<li>Replication</li>
</ul>
</li>
</ul>


<p>创建一个用户并赋权：</p>

<ul>
<li>使用原生的SQL</li>
<li>更改数据库记录</li>
<li>更简单的方法

<h4>查看用户权限</h4>

show grants;

<h4>如何更改用户的权限</h4></li>
</ul>


<h4>如何更改用户的密码</h4>

<h4>删除用户</h4>

<h4>With Grant Option</h4>

<h4>与权限相关的表</h4>

<ul>
<li>user</li>
<li>db</li>
<li>tables_priv</li>
<li>clomuns_priv

<h5>Mysql 权限验证的过程</h5></li>
</ul>


<h4>MySQL权限上有哪些问题</h4>

<ul>
<li>默认的test库不受权限控制，存在安全风险</li>
<li>mysql_secure_installation</li>
</ul>


<h4>小结</h4>

<ul>
<li>权限相关的操作不要直接操作表，统一使用MySQL命令</li>
<li>使用二进制安装MySQL后，需要重置管理用户（root）的密码</li>
<li>线上数据库不要留test库</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL索引]]></title>
    <link href="http://fenghan.github.io/blog/2015/09/10/mysql-index/"/>
    <updated>2015-09-10T10:07:51+08:00</updated>
    <id>http://fenghan.github.io/blog/2015/09/10/mysql-index</id>
    <content type="html"><![CDATA[<h4>什么是索引</h4>

<p>索引是值到行位置的映射。索引就是一个目录。</p>

<h4>索引的作用：</h4>

<ul>
<li>提高访问的速度。硬盘IO每秒100到150次的响应。每次10毫秒</li>
<li>实现主键、唯一键逻辑</li>
</ul>


<p>IO是个宝贵的资源，</p>

<h4>索引的使用场景：</h4>

<p>FTS 全表索引</p>

<h4>Mysql中我们可以使用的索引类型：</h4>

<ul>
<li>Btree索引：</li>
<li>B+tree： 平衡二叉树的一种改良</li>
<li>Hash索引 InnoDB</li>
<li>Innodb ： 聚簇索引，</li>
<li>二级索引： 除了主键，用户创建的索引。</li>
</ul>


<h4>索引的代价：</h4>

<p>插入修改删除每个索引都编程一个内部事务，索引越多，事务越长。(增删改)</p>

<h4>索引的优势:</h4>

<ol>
<li>减少查询IO</li>
<li>优化等值查询、范围查询</li>
<li><p>利用有序特性</p>

<p> order by , group byh , distinct, max ,min</p></li>
</ol>


<h4>如何用好索引：</h4>

<ul>
<li><p>依据where查询条件来建立索引：</p>

<pre><code>  select a,b from tab_a where c = ?;  #c上建立索引
</code></pre></li>
<li><p>使用联合索引，而不是多个单列索引。</p>

<pre><code>  select * from tab_a where a = ? AND b = ? 
  #建立a和b的索引， 把一组值作为b+tree 的索引， 在同一个树里，查询速度更高。
</code></pre></li>
<li><p>联合索引， 区分度大的放在前面。</p>

<pre><code>  name,gender 对， 因为name的区分度很大。能够更好地使用b+ TREE来定位节点

  gender,name 错
</code></pre></li>
<li><p>联合索引能为前缀单列，复列查询提供帮助。</p>

<pre><code>  where a = ? 
  wherer a = ? AND b =? 
</code></pre></li>
<li><p>合理创建联合索引，避免冗余。
      abc 包含 a ,ab</p></li>
<li><p>ORDER BY, GROUP BY, DISTINCT 字段添加索引</p></li>
<li><p>用 EXPLAIN 查看语句</p>

<pre><code>  possible_key 可以使用的索引
  key 实际的索引名字  重要
  rows  读的记录行数，才返回的结果 重要。
  typpe   index  扫描完整的索引树， 重要   
  key_len 如果只使用了一部分，为长度。  
  force index  强制使用索引 
  ignore index 
</code></pre>

<h4>其他技巧</h4></li>
<li><p>一个表，控制百万级别。如何达到了一两百G，就可以考虑分库分表了。千万级别，取决于访问方式，left join</p></li>
<li><p>WHERE查询时，  函数不要加在字段上。timestamp > func(1234)。</p></li>
<li><p>外键一般用程序使用。</p></li>
<li><p>什么事优化器： 哪个索引会更快，IO更小。生发语法数，生成一个计划。</p></li>
<li><p>纵向分表，根据业务来拆分。</p></li>
<li><p>等值查询 ，2个范围查询， 不能都覆盖到。联合查询。等值能用一个，范围查询也只能用一个。</p></li>
<li><p>通过表结构设计来避免连表。</p></li>
<li><p>触发器和存储过程不好维护，做运维手段还可以。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL Foundation]]></title>
    <link href="http://fenghan.github.io/blog/2015/09/09/mysql-foundation/"/>
    <updated>2015-09-09T15:25:59+08:00</updated>
    <id>http://fenghan.github.io/blog/2015/09/09/mysql-foundation</id>
    <content type="html"><![CDATA[<h1>认识MySQL</h1>

<h4>关系与非关系型数据库</h4>

<p>关系型数据库</p>

<ul>
<li>mysql</li>
<li>oracle</li>
<li>sql server</li>
<li>postgresql</li>
</ul>


<p>非关系型数据库</p>

<ul>
<li>hadoop</li>
<li>mongoDB</li>
<li>redis</li>
<li>Cassandra</li>
</ul>


<p>区别：</p>

<p>是否使用SQL语句作为数据操作的方法和方式。</p>

<p>所以关系型数据库又叫做SQL数据库。</p>

<h4>为什么学习MySQL</h4>

<ul>
<li>基于GPL协议</li>
<li>Mysql 最流行 ，开源，但不是最先进的。</li>
<li>互联网企业中占绝对主流地位</li>
</ul>


<p>开发者学习MySQL：</p>

<ul>
<li>学习数据类型的正确使用</li>
<li>学习如何利用索引优化查询效率</li>
<li>了解分区，读写分离特性</li>
<li>了解数据库事务相关特性</li>
</ul>


<p>DBA学习MySQL：</p>

<ul>
<li>学习MySQL体系结构知识</li>
<li>学习日常运维，性能调优，故障排查</li>
<li>虚席数据层架构设计，schema优化知识</li>
</ul>


<h1>轻松安装MySQL</h1>

<p>5.6 <a href="http://www.mysql.com/downloads/">http://www.mysql.com/downloads/</a></p>

<ul>
<li>企业版</li>
<li>集群版</li>
<li>社区版 （免费）

<h4>Windows上安装</h4>

<p>安装包：300M+</p></li>
</ul>


<h4>Linux上安装</h4>

<h4>Ubuntu上安装MySQL</h4>

<pre><code>apt-cache search mysql-server
apt-get install mysql-server-5.6
#查看mysql进程
ps -ef|grep mysqld
#查看mysql状态：版本、运行时间、连接方式、查询统计
sudo /etc/init.d/mysql status
#msyql启动、停止、重启
sudo /etc/init.d/mysql start|stop|restart
</code></pre>

<h1>连接使用MySQL</h1>

<ul>
<li>应用程序驱动</li>
<li>MySQL命令行</li>
<li><p>GUI工具</p>

<p>  #查看mysql-client版本
  mysql -V</p></li>
</ul>


<p>命令行连接MySQL</p>

<ul>
<li><p>Socket连接(本地连接)</p>

<pre><code>  mysql -S/var/run/mysqld/mysqld.sock -uhomestead -p
</code></pre></li>
<li><p>TCP/IP连接（远程连接）</p>

<pre><code>   mysql -h127.0.0.1 -P3306 -uhomestead -p
</code></pre></li>
</ul>


<p>本地连接只能在MySQL服务器上创建，常作为MySQL状态检查，或程序和MySQL部署在一台机器上。</p>

<pre><code>#小技巧
Ctrl + r : 搜索之前敲过的命令
</code></pre>

<h3>两个重要的命令： status, show processlist</h3>

<h4>status</h4>

<p>关注的信息：</p>

<ul>
<li>Server version</li>
<li>characterset: utf8 (Server, Db, Client, Conn)</li>
<li>Uptime

<h4>show processlist</h4></li>
</ul>


<p>help select;</p>

<pre><code>#查看socket文件位置
show global variables like 'socket'
</code></pre>

<ul>
<li>socket权限为777</li>
<li>不要把密码直接输入在命令行里面，存在安全风险。</li>
</ul>


<p>history -c 清楚命令行历史</p>

<h4>常用的图形客户端工具</h4>

<ul>
<li>Navicat</li>
<li><p>MySQLWenkBench</p></li>
<li><p>操作简单，易于上手</p></li>
<li>支出图形化的导入导出</li>
<li>可视化的界面输出</li>
</ul>


<p>总结：</p>

<ol>
<li>应用程序使用API接口连接MySQL</li>
<li>开发工程师可以使用图形工具连接MySQL</li>
<li><strong>命令行工具才是DBA的最爱</strong></li>
</ol>


<h1>SQL语言入门</h1>

<p>DDL :
- CREATE TABLE
- DROP TABLE
- ALTER TABLE</p>

<p>DML:</p>

<ul>
<li>SELECT FROM TABLE</li>
<li>INSERT INTO TABLE</li>
<li>UPDATE TABLE SET</li>
<li>DELETE FROM TABLE</li>
</ul>


<p>DCL:</p>

<ul>
<li>GRANT</li>
<li>REVOKE</li>
</ul>


<p>TCL:</p>

<ul>
<li>COMMIT</li>
<li>ROLLBACK</li>
</ul>


<p><a href="http://www.w3school.com.cn/sql/">SQL教程</a></p>

<h1>认识DBA</h1>

<p>DBA是最后一道屏障，守门员，是业务稳定的基石。</p>

<p>监控线上，保障业务的正常运行。</p>

<p>做好实时性能监控,一旦有长的SQL语句，就会立刻接到报警，然后进行调优。</p>

<h4>小公司</h4>

<ul>
<li>没有专职DBA</li>
<li>但肯定有懂数据库的人</li>
</ul>


<p>大公司：</p>

<ul>
<li>专职DBA</li>
<li>数据存储技术专家</li>
</ul>


<p>互联网业务： 高性能、高可用、可扩展、安全性。</p>

<p>没有DBA就没有稳定的数据库，请求变慢，数据丢失，安全问题，用户投诉，无穷无尽。</p>

<h3>DBA要做哪些工作？</h3>

<ol>
<li>基础运维

<ul>
<li>安全部署</li>
<li>监控</li>
<li>故障处理</li>
</ul>
</li>
<li>安全运维工作

<ul>
<li>数据备份与恢复</li>
<li>安全访问，安全漏洞</li>
<li>审计</li>
</ul>
</li>
<li>性能调优工作

<ul>
<li>数据库优化</li>
<li>容量评估、软硬件升级</li>
</ul>
</li>
<li>开发支持工作

<ul>
<li>存储方案制定(哪些数据放在memcache，减少对数据库的访问)</li>
<li>数据库设计</li>
<li>数据库变更 SQL Review （审核业务SQL，全表扫描的SQL会把数据库跑死）</li>
</ul>
</li>
<li>流程与培训

<ul>
<li>数据库开发规范</li>
<li>运维流程与标准化</li>
<li>业务培训</li>
</ul>
</li>
</ol>


<p>练习：
mysql要做的：</p>

<p>分析MySQL慢日志请求，优化表索引</p>

<h4>DBA需要的技能</h4>

<p>专业技能：
    - 数据库原理
    - Linux与Shell
    - 计算机体系结构
    - 网络原理
    - 数据库系统与操作
    - 服务器硬件
    - 业务架构设计
软技能：</p>

<pre><code>- 责任心、执行力
- 坚韧，抗压（半夜、凌晨工作）
- 学习与沟通能力
- 正直，诚信
- 耐心，注重细节
- 分析能力
- 团队协作
- 
</code></pre>

<p>DBA如何发展？</p>

<ul>
<li>业务架构师（数据存储有深入研究，处理不同业务场景与需求的数据存储）</li>
<li>运维专家（解决mysql的任何问题，帮助数据库更稳定更高效的运行）</li>
<li>数据库研发（改进数据库系统或开发自己的数据库）</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL主从配置及读写分离]]></title>
    <link href="http://fenghan.github.io/blog/2015/08/23/mysql-master-slave/"/>
    <updated>2015-08-23T21:53:41+08:00</updated>
    <id>http://fenghan.github.io/blog/2015/08/23/mysql-master-slave</id>
    <content type="html"><![CDATA[<h1>前言</h1>

<p>以前在公司的时候，公司配了MySQL主从，在线上用PHPMyAdmin查看从库信息，但只给了读权限，用于查看线上信息。今天记录一下MySQL主从的搭建过程。（我使用的是MariaDb5.5）</p>

<h2>Notice</h2>

<p>在用户不多、并发不大、mysql服务器在同一个局域网内，MySQL主从是没有问题的。</p>

<p>主从数据库缺点：</p>

<ol>
<li>因为开启了bin log日志，所以会有性能开销。</li>
<li>在实时性非常高的情况下，做了读写分离就不行。因为单线程同步需要花时间，时间上不允许。</li>
</ol>


<h1>MySQL主从配置</h1>

<ol>
<li>mysql的版本相同， mysql主从同源，即具有相同的库、表及记录。</li>
<li>数据迁移的时候，从库的版本高于主库。</li>
<li><p>把主库从库都停掉。因为打包主库的时候会花很长时间，这时如果主库还有文件写入，很容易出错。</p>

<p> cd /var/lib/
 tar zcvf mysql.tar.gz ./mysql</p>

<p> scp mysql.tar.gz vagrant@192.168.33.10:/tmp</p></li>
<li><p>配置/etc/mysql/my.cnf</p>

<p> server-id               = 1
 log_bin                 = /var/log/mysql/mysql-bin.log
 expire_logs_days        = 10
 max_binlog_size         = 100M      每个bin log文件最大的大小</p></li>
</ol>


<p>开启log_bin日志，性能就会降低。没修改一条数据，就会写入文件。硬盘不大的情况下，会写满数据库</p>

<p>要放到msyql有权限的目录里。</p>

<p>我们的目的是用从库修复主库。
靠从库的bin_log来恢复主机。</p>

<p>写bin_log性能降低，但因为我们做了主从，我们靠读多个从库来提高并发量。</p>

<p>让从库能够通过tcp 来连接主库，
5. 为从库专门准备一个用户。</p>

<pre><code>create user 'slave_1'@'%' IDENTIFIED BY 'abcd' ;
grant replication slave  on *.* to 'slave_1'@'%';
或者一条命令
GRANT REPLICATION SLAVE ON *.* to 'mysync'@'%' identified by 'q123456'; 
</code></pre>

<ol>
<li><p>通过  SHOW MASTER STATUS; 显示当前主库的binlog文件与文件位置，我们需要将这个位置记录下来</p>

<p>   SHOW MASTER STATUS;</p></li>
</ol>


<p>连接到从库   开启主从同步</p>

<pre><code>CHANGE MASTER TO MASTER_HOST = '192.168.33.12' ,MASTER_USER='slave_2' ,MASTER_PASSWORD = '1234' ,MASTER_LOG_FILE ='mysql-bin.000002', MASTER_LOG_POS=973
</code></pre>

<p> 不想同步系统库可以选择忽略系统库</p>

<pre><code>binlog_ignore_db        = mysql
</code></pre>

<p>SALVE命令</p>

<pre><code>START SLAVE
STOP  SLAVE
SHOW SLAVE STATUS\G
</code></pre>

<p>我在安装的时候遇到的错误：
<a href="http://serverfault.com/questions/586651/mysql-refuses-to-accept-remote-connections">MySQL refuses to accept remote connections</a></p>

<p>解决方法：</p>

<pre><code>sudo netstat -ntlup | grep mysql
tcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      127018/mysqld
</code></pre>

<p>修改/etc/mysql/my.cnf</p>

<pre><code>bind-address = 0.0.0.0
</code></pre>

<h1>读写分离</h1>

<p>主库创建新用户</p>

<pre><code>GRANT all privileges  ON tiny.* to 'michael'@'%' identified by '1234'; 
flush privileges;
</code></pre>

<p>从库创建新用户，只给读的权限。</p>

<pre><code>GRANT SELECT  ON tiny.* to 'michael2'@'%' identified by '1234'; 

flush privileges;
</code></pre>

<h3>代码</h3>

<p>代码我放到了我的GitHub上，我自己写了一个MVC的简易框架。这样，框架的任何一个部分我都了解，大大节约了我写代码示例的时间。然后学习优秀框架的思想，继续维护我的框架。</p>

<p><a href="https://github.com/hildalove/tiny/blob/master/Tiny/Proxy/Proxy.php">代理模式</a></p>

<p><a href="https://github.com/hildalove/tiny/blob/master/Tiny/Service/Factory.php">获取数据库实例</a></p>

<p><a href="https://github.com/hildalove/tiny/blob/master/App/Controller/Mysql.php">控制器</a></p>
]]></content>
  </entry>
  
</feed>
